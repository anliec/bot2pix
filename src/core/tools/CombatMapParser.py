import numpy as np
import cv2
from collections import defaultdict
import unittest

from core.tools.CellCoordinateManager import CellCoordinateManager
from core.Map import Map, VOID_CELL_ID, OBSTACLE_CELL_ID, WALKABLE_CELL_ID, TEAM_RED_CELL_ID, TEAM_BLUE_CELL_ID
from core import env, dofus

CELL_VOID_MAX_LUM = 80
CELL_VOID_MAX_DEVIATION = 20
CELL_COLOR_VOID = np.array([(0, 0, 0), (77, 87, 75), (73, 83, 72), (67, 75, 65), (100, 106, 98), (100, 104, 97),
                            (84, 101, 92), (83, 101, 92), (94, 99, 91), (19, 20, 18), (65, 73, 63), (93, 98, 91),
                            (40, 41, 42), (16, 24, 41), (67, 71, 65)],
                           dtype=np.uint8)
CELL_COLOR_OBSTACLE = np.array([(147, 150, 153), (142, 146, 148), (132, 140, 137)], dtype=np.uint8)
CELL_COLOR_WALKABLE = np.array([(143, 167, 173), (153, 177, 183),
                                (92, 147, 110), (86, 141, 104),  # green tile
                                ], dtype=np.uint8)
CELL_COLOR_BOONES = np.array([(93, 77, 77), (69, 59, 53), (67, 58, 51), (61, 54, 46), (85, 71, 69),  # blue team boones
                              (154, 179, 194),  # feca
                              ], dtype=np.uint8)
CELL_COLOR_TEAM_RED_START = np.array([(0, 34, 221)])
CELL_COLOR_TEAM_BLUE_START = np.array([(173, 135, 129), (166, 128, 122)])

COLOR_BOONES_RED_CIRCLE = [0, 0, 255]
COLOR_BOONES_BLUE_CIRCLE = [255, 0, 0]


def is_color_in_list(c, l, thresh=25):
    for cl in l:
        if np.linalg.norm(c - cl) < thresh:
            return True
    return False


class CombatMapParser:
    def __init__(self, crop_map_width=None, crop_map_height=None, cell_h_count=14.5, cell_v_count=20):
        if crop_map_height is None or crop_map_width is None:
            crop_map_height = dofus.COMBAT_R.height()
            crop_map_width = dofus.COMBAT_R.width()
        self.cell_coordinate_manager = CellCoordinateManager(crop_map_width, crop_map_height,
                                                             cell_h_count, cell_v_count)
        self.top_corner_dx = 0
        self.top_corner_dy = int(self.cell_coordinate_manager.cell_h * -0.32)

    def parse_map(self, map_img=None, is_placement_stage=False):
        if map_img is None:
            map_img = env.capture(dofus.COMBAT_R)
        # draw on a copy of the image
        img = map_img.copy()
        map_dict = {}
        team_red = []
        team_blue = []
        team_blue_start_pos = []
        team_red_start_pos = []
        colors = defaultdict(int)
        for pix_x, pix_y, x, y in self.cell_coordinate_manager.iterate_pixel_coord():
            # cv2.circle(img, (pix_x, pix_y), 3, (255, 0, 0), 3)
            c = img[pix_y + self.top_corner_dy, pix_x + self.top_corner_dx, :]
            c = tuple([int(i) for i in c])
            cv2.circle(img, (pix_x + self.top_corner_dx, pix_y + self.top_corner_dy), 3, c, 6)
            ca = np.array(c, dtype=np.uint8)

            if self.is_void_tile(ca, pix_x, pix_y, img):
                cv2.circle(img, (pix_x, pix_y), 20, (50, 50, 50), 3)
                map_dict[(x, y)] = VOID_CELL_ID
            elif is_color_in_list(ca, CELL_COLOR_OBSTACLE):
                cv2.circle(img, (pix_x, pix_y), 20, (0, 255, 0), 3)
                map_dict[(x, y)] = OBSTACLE_CELL_ID
            elif is_color_in_list(ca, CELL_COLOR_WALKABLE, thresh=5):
                cv2.circle(img, (pix_x, pix_y), 20, (0, 255, 255), 3)
                map_dict[(x, y)] = WALKABLE_CELL_ID
            else:
                if is_placement_stage:
                    if is_color_in_list(ca, CELL_COLOR_TEAM_RED_START):
                        team_red_start_pos.append((x, y))
                        cv2.circle(img, (pix_x, pix_y), 15, (0, 0, 200), 3)
                    elif is_color_in_list(ca, CELL_COLOR_TEAM_BLUE_START):
                        team_blue_start_pos.append((x, y))
                        cv2.circle(img, (pix_x, pix_y), 15, (200, 0, 0), 3)
                is_boones, boone_team = self.is_boones(img, pix_x, pix_y)
                if is_boones and boone_team == "red":
                    cv2.circle(img, (pix_x, pix_y), 20, (0, 0, 255), 3)
                    map_dict[(x, y)] = TEAM_RED_CELL_ID
                    team_red.append((x, y))
                    if is_placement_stage:
                        team_red_start_pos.append((x, y))
                elif is_boones and boone_team == "blue":
                    cv2.circle(img, (pix_x, pix_y), 20, (255, 0, 0), 3)
                    map_dict[(x, y)] = TEAM_BLUE_CELL_ID
                    team_blue.append((x, y))
                    if is_placement_stage:
                        team_blue_start_pos.append((x, y))
                else:
                    cv2.circle(img, (pix_x, pix_y), 20, (0, 255, 255), 1)
                    colors[c] += 1
                    map_dict[(x, y)] = WALKABLE_CELL_ID
        # print(len(colors), sum(colors.values()))
        # print(sorted(colors.items(), key=lambda x: -x[1]))
        # cv2.imshow("dot", img)
        if len(team_red) != 1 or len(team_blue) == 0:
            # debug code, in case of strange result save the image for further inspection
            cv2.imwrite("/tmp/dot_noPr.png", map_img)
            cv2.imwrite("/tmp/dot.png", img)
        # cv2.waitKey()
        player_info = {"red": team_red,
                       "blue": team_blue}
        if is_placement_stage:
            player_info["red_start_pos"] = team_red_start_pos
            player_info["blue_start_pos"] = team_blue_start_pos

        return Map(map_dict), player_info

    def is_void_tile(self, tile_color, pix_x, pix_y, img):
        # Void cell are usually low luminosity shade of white, test that first
        if (tile_color.max() - tile_color.min() < CELL_VOID_MAX_DEVIATION and tile_color.max() < CELL_VOID_MAX_LUM) \
                or is_color_in_list(tile_color, CELL_COLOR_VOID):
            if not is_color_in_list(tile_color, CELL_COLOR_BOONES):
                # First do a basic, quick check
                return True
            elif self.is_boones(img, pix_x, pix_y)[0]:
                # If it might be a boones, do the expensive check, and do it again later when we actually check for it
                return False
            else:
                return True
        return False

    @staticmethod
    def count_pixel_of_color(img, color):
        return np.count_nonzero(np.sum(color == img, axis=2) == 3)

    def is_boones(self, img, pix_x, pix_y):
        crop = self.cell_coordinate_manager.crop_img_at_coord(img, pix_x, pix_y, mask_color=(0, 0, 0))
        if crop.shape[0] == 0 or crop.shape[1] == 0:
            return False, ""
        thresh = crop.shape[0] * crop.shape[1] / 100
        red_count = np.sum(crop[:, :, 2] == 255)
        blue_count = np.sum(crop[:, :, 0] == 255)
        if red_count > thresh and red_count > blue_count:
            # self.count_pixel_of_color(crop, COLOR_BOONES_RED_CIRCLE) > 60:
            # cv2.imshow("red {} {}".format(pix_x, pix_y), crop)
            return True, "red"
        elif blue_count > thresh and blue_count > red_count:
            # self.count_pixel_of_color(crop, COLOR_BOONES_BLUE_CIRCLE) > 60:
            # cv2.imshow("blue {} {}".format(pix_x, pix_y), crop)
            return True, "blue"
        else:
            # cv2.imshow("empty {} {}".format(pix_x, pix_y), crop)
            return False, ""

    def click_on_tile(self, pos):
        pix_x = self.cell_coordinate_manager.to_pix_x(*pos) + dofus.COMBAT_R.x()
        pix_y = self.cell_coordinate_manager.to_pix_y(*pos) + dofus.COMBAT_R.y()
        env.click(pix_x, pix_y)


def main():
    import cv2
    import numpy as np
    from core import dofus
    from core.ScaleManager import ScaleManager

    # full_image = cv2.imread("/home/nicolas/Pictures/Screenshot_20210317_190049-1_window_crop_noheader.png")
    # full_image = cv2.imread("/home/nicolas/Pictures/Screenshot_20210318_174552_window_crop_noheader.png")
    # full_image = cv2.imread("/home/nicolas/Pictures/Screenshot_20210318_204752_window_crop_noheader.png")
    # Placement stage
    full_image = cv2.imread("/home/nicolas/Pictures/Screenshot_20210321_092431.png")
    h, w, c = full_image.shape
    print(full_image.shape)
    ScaleManager().set_win_size(w, h)
    x, y, w, h = dofus.COMBAT_R.getRect()
    # img = np.zeros(shape=(h + 100, w + 100, 3), dtype=np.uint8)
    # img[:h, :w, :] = full_image[y:y + h, x:x + w, :]
    img = full_image[y:y + h, x:x + w, :]

    map_parser = CombatMapParser()

    map_parser.parse_map(img, is_placement_stage=True)

    cv2.imshow("dot", img)
    cv2.waitKey()


class TestCombatMapParserMethods(unittest.TestCase):

    def test_fight5(self):
        map_image = cv2.imread("/home/nicolas/Documents/Programation/Python/bot2pix/TestData/img/fight5.png")
        h, w, c = map_image.shape
        map_parser = CombatMapParser(w, h)
        map_obj, player_info = map_parser.parse_map(map_image, is_placement_stage=False)

        self.assertNotIn("red_start_pos", player_info)
        self.assertNotIn("blue_start_pos", player_info)
        self.assertIn("blue", player_info)
        self.assertIn("red", player_info)

        self.assertEqual(len(player_info["red"]), 1)
        self.assertEqual(len(player_info["blue"]), 1)

        expected_map = {(0, 0): 0, (1, -1): 0, (1, 0): 0, (1, 1): 0, (2, -2): 1, (2, -1): 1, (2, 0): 0, (2, 1): 2, (2, 2): 2, (3, -3): 0, (3, -2): 1, (3, -1): 1, (3, 0): 0, (3, 1): 2, (3, 2): 2, (3, 3): 2, (4, -4): 0, (4, -3): 0, (4, -2): 1, (4, -1): 1, (4, 0): 0, (4, 1): 2, (4, 2): 2, (4, 3): 2, (4, 4): 2, (5, -5): 2, (5, -4): 2, (5, -3): 1, (5, -2): 1, (5, -1): 1, (5, 0): 2, (5, 1): 2, (5, 2): 2, (5, 3): 2, (5, 4): 2, (5, 5): 2, (6, -6): 0, (6, -5): 2, (6, -4): 2, (6, -3): 1, (6, -2): 0, (6, -1): 1, (6, 0): 2, (6, 1): 2, (6, 2): 2, (6, 3): 2, (6, 4): 2, (6, 5): 2, (6, 6): 2, (7, -7): 0, (7, -6): 0, (7, -5): 2, (7, -4): 2, (7, -3): 1, (7, -2): 1, (7, -1): 1, (7, 0): 2, (7, 1): 2, (7, 2): 2, (7, 3): 2, (7, 4): 2, (7, 5): 2, (7, 6): 2, (7, 7): 2, (8, -8): 0, (8, -7): 0, (8, -6): 0, (8, -5): 2, (8, -4): 2, (8, -3): 1, (8, -2): 1, (8, -1): 0, (8, 0): 2, (8, 1): 2, (8, 2): 0, (8, 3): 0, (8, 4): 2, (8, 5): 2, (8, 6): 2, (8, 7): 2, (8, 8): 2, (9, -9): 0, (9, -8): 0, (9, -7): 0, (9, -6): 0, (9, -5): 2, (9, -4): 2, (9, -3): 2, (9, -2): 1, (9, -1): 2, (9, 0): 2, (9, 1): 2, (9, 2): 1, (9, 3): 0, (9, 4): 2, (9, 5): 2, (9, 6): 2, (9, 7): 2, (9, 8): 2, (9, 9): 2, (10, -10): 0, (10, -9): 0, (10, -8): 0, (10, -7): 0, (10, -6): 2, (10, -5): 2, (10, -4): 2, (10, -3): 2, (10, -2): 1, (10, -1): 2, (10, 0): 2, (10, 1): 2, (10, 2): 1, (10, 3): 0, (10, 4): 2, (10, 5): 2, (10, 6): 2, (10, 7): 2, (10, 8): 2, (10, 9): 2, (10, 10): 2, (11, -11): 0, (11, -10): 0, (11, -9): 0, (11, -8): 0, (11, -7): 2, (11, -6): 2, (11, -5): 2, (11, -4): 2, (11, -3): 2, (11, -2): 1, (11, -1): 2, (11, 0): 2, (11, 1): 2, (11, 2): 1, (11, 3): 0, (11, 4): 2, (11, 5): 2, (11, 6): 2, (11, 7): 2, (11, 8): 2, (11, 9): 2, (11, 10): 2, (11, 11): 2, (12, -12): 0, (12, -11): 0, (12, -10): 0, (12, -9): 0, (12, -8): 0, (12, -7): 2, (12, -6): 2, (12, -5): 2, (12, -4): 2, (12, -3): 2, (12, -2): 2, (12, -1): 2, (12, 0): 2, (12, 1): 2, (12, 2): 1, (12, 3): 0, (12, 4): 2, (12, 5): 2, (12, 6): 2, (12, 7): 2, (12, 8): 2, (12, 9): 2, (12, 10): 2, (12, 11): 2, (12, 12): 2, (13, -13): 0, (13, -12): 0, (13, -11): 0, (13, -10): 2, (13, -9): 2, (13, -8): 1, (13, -7): 2, (13, -6): 2, (13, -5): 2, (13, -4): 2, (13, -3): 2, (13, -2): 2, (13, -1): 2, (13, 0): 2, (13, 1): 2, (13, 2): 1, (13, 3): 0, (13, 4): 2, (13, 5): 2, (13, 6): 2, (13, 7): 2, (13, 8): 2, (13, 9): 2, (13, 10): 2, (13, 11): 2, (13, 12): 2, (13, 13): 0, (14, -14): 0, (14, -13): 0, (14, -12): 0, (14, -11): 2, (14, -10): 2, (14, -9): 2, (14, -8): 1, (14, -7): 1, (14, -6): 2, (14, -5): 2, (14, -4): 2, (14, -3): 0, (14, -2): 1, (14, -1): 0, (14, 0): 0, (14, 1): 0, (14, 2): 1, (14, 3): 0, (14, 4): 0, (14, 5): 0, (14, 6): 0, (14, 7): 2, (14, 8): 2, (14, 9): 2, (14, 10): 2, (14, 11): 2, (14, 12): 2, (14, 13): 0, (15, -15): 0, (15, -14): 0, (15, -13): 0, (15, -12): 0, (15, -11): 2, (15, -10): 2, (15, -9): 2, (15, -8): 2, (15, -7): 2, (15, -6): 2, (15, -5): 2, (15, -4): 0, (15, -3): 1, (15, -2): 1, (15, -1): 1, (15, 0): 1, (15, 1): 1, (15, 2): 0, (15, 3): 1, (15, 4): 0, (15, 5): 0, (15, 6): 0, (15, 7): 1, (15, 8): 0, (15, 9): 0, (15, 10): 0, (15, 11): 0, (15, 12): 0, (16, -16): 0, (16, -15): 0, (16, -14): 0, (16, -13): 0, (16, -12): 0, (16, -11): 2, (16, -10): 2, (16, -9): 2, (16, -8): 2, (16, -7): 2, (16, -6): 2, (16, -5): 2, (16, -4): 2, (16, -3): 1, (16, -2): 0, (16, -1): 0, (16, 0): 0, (16, 1): 1, (16, 2): 0, (16, 3): 1, (16, 4): 0, (16, 5): 0, (16, 6): 0, (16, 7): 1, (16, 8): 1, (16, 9): 0, (16, 10): 0, (16, 11): 0, (17, -17): 0, (17, -16): 0, (17, -15): 0, (17, -14): 0, (17, -13): 0, (17, -12): 0, (17, -11): 0, (17, -10): 0, (17, -9): 0, (17, -8): 1, (17, -7): 2, (17, -6): 2, (17, -5): 2, (17, -4): 2, (17, -3): 1, (17, -2): 0, (17, -1): 0, (17, 0): 0, (17, 1): 1, (17, 2): 0, (17, 3): 1, (17, 4): 0, (17, 5): 0, (17, 6): 0, (17, 7): 1, (17, 8): 1, (17, 9): 1, (17, 10): 1, (18, -18): 0, (18, -17): 0, (18, -16): 0, (18, -15): 0, (18, -14): 0, (18, -13): 0, (18, -12): 0, (18, -11): 0, (18, -10): 0, (18, -9): 0, (18, -8): 1, (18, -7): 0, (18, -6): 2, (18, -5): 2, (18, -4): 2, (18, -3): 1, (18, -2): 1, (18, -1): 1, (18, 0): 1, (18, 1): 1, (18, 2): 1, (18, 3): 1, (18, 4): 0, (18, 5): 0, (18, 6): 0, (18, 7): 1, (18, 8): 0, (18, 9): 0, (19, -19): 0, (19, -18): 0, (19, -17): 0, (19, -16): 0, (19, -15): 0, (19, -14): 0, (19, -13): 0, (19, -12): 0, (19, -11): 0, (19, -10): 0, (19, -9): 0, (19, -8): 0, (19, -7): 0, (19, -6): 2, (19, -5): 2, (19, -4): 2, (19, -3): 0, (19, -2): 1, (19, -1): 0, (19, 0): 1, (19, 1): 0, (19, 2): 0, (19, 3): 1, (19, 4): 0, (19, 5): 0, (19, 6): 0, (19, 7): 1, (19, 8): 0, (20, -19): 0, (20, -18): 0, (20, -17): 0, (20, -16): 0, (20, -15): 0, (20, -14): 0, (20, -13): 0, (20, -12): 0, (20, -11): 0, (20, -10): 0, (20, -9): 0, (20, -8): 0, (20, -7): 1, (20, -6): 0, (20, -5): 2, (20, -4): 2, (20, -3): 2, (20, -2): 2, (20, -1): 2, (20, 0): 2, (20, 1): 2, (20, 2): 2, (20, 3): 1, (20, 4): 0, (20, 5): 0, (20, 6): 0, (20, 7): 1, (21, -18): 0, (21, -17): 0, (21, -16): 0, (21, -15): 0, (21, -14): 0, (21, -13): 0, (21, -12): 0, (21, -11): 0, (21, -10): 1, (21, -9): 0, (21, -8): 0, (21, -7): 1, (21, -6): 0, (21, -5): 2, (21, -4): 2, (21, -3): 2, (21, -2): 2, (21, -1): 2, (21, 0): 2, (21, 1): 2, (21, 2): 2, (21, 3): 0, (21, 4): 0, (21, 5): 0, (21, 6): 0, (22, -17): 0, (22, -16): 0, (22, -15): 0, (22, -14): 0, (22, -13): 0, (22, -12): 0, (22, -11): 0, (22, -10): 0, (22, -9): 0, (22, -8): 2, (22, -7): 2, (22, -6): 2, (22, -5): 2, (22, -4): 2, (22, -3): 3, (22, -2): 2, (22, -1): 2, (22, 0): 2, (22, 1): 2, (22, 2): 2, (22, 3): 2, (22, 4): 2, (22, 5): 0, (23, -16): 0, (23, -15): 0, (23, -14): 0, (23, -13): 0, (23, -12): 0, (23, -11): 0, (23, -10): 0, (23, -9): 0, (23, -8): 2, (23, -7): 2, (23, -6): 2, (23, -5): 2, (23, -4): 2, (23, -3): 4, (23, -2): 2, (23, -1): 2, (23, 0): 2, (23, 1): 2, (23, 2): 2, (23, 3): 2, (23, 4): 2, (24, -15): 0, (24, -14): 0, (24, -13): 0, (24, -12): 0, (24, -11): 0, (24, -10): 0, (24, -9): 0, (24, -8): 0, (24, -7): 2, (24, -6): 0, (24, -5): 2, (24, -4): 2, (24, -3): 2, (24, -2): 2, (24, -1): 2, (24, 0): 2, (24, 1): 2, (24, 2): 2, (24, 3): 2, (25, -14): 0, (25, -13): 0, (25, -12): 0, (25, -11): 0, (25, -10): 0, (25, -9): 0, (25, -8): 0, (25, -7): 2, (25, -6): 0, (25, -5): 2, (25, -4): 2, (25, -3): 2, (25, -2): 2, (25, -1): 2, (25, 0): 2, (25, 1): 2, (25, 2): 2, (26, -13): 0, (26, -12): 0, (26, -11): 0, (26, -10): 0, (26, -9): 0, (26, -8): 0, (26, -7): 2, (26, -6): 2, (26, -5): 2, (26, -4): 2, (26, -3): 2, (26, -2): 2, (26, -1): 2, (26, 0): 2, (26, 1): 2, (27, -12): 0, (27, -11): 0, (27, -10): 0, (27, -9): 0, (27, -8): 0, (27, -7): 2, (27, -6): 2, (27, -5): 0, (27, -4): 0, (27, -3): 2, (27, -2): 2, (27, -1): 2, (27, 0): 2, (28, -11): 0, (28, -10): 0, (28, -9): 0, (28, -8): 0, (28, -7): 0, (28, -6): 0, (28, -5): 0, (28, -4): 1, (28, -3): 2, (28, -2): 2, (28, -1): 2, (29, -10): 0, (29, -9): 0, (29, -8): 0, (29, -7): 0, (29, -6): 0, (29, -5): 0, (29, -4): 1, (29, -3): 2, (29, -2): 2, (30, -9): 0, (30, -8): 0, (30, -7): 0, (30, -6): 0, (30, -5): 0, (30, -4): 0, (30, -3): 1, (31, -8): 0, (31, -7): 0, (31, -6): 0, (31, -5): 0, (31, -4): 0, (32, -7): 0, (32, -6): 0, (32, -5): 0, (33, -6): 0}
        self.assertDictEqual(map_obj.map_dict, expected_map)

    def test_fight4(self):
        map_image = cv2.imread("/home/nicolas/Documents/Programation/Python/bot2pix/TestData/img/fight4.png")
        h, w, c = map_image.shape
        map_parser = CombatMapParser(w, h)
        map_obj, player_info = map_parser.parse_map(map_image, is_placement_stage=False)

        self.assertNotIn("red_start_pos", player_info)
        self.assertNotIn("blue_start_pos", player_info)
        self.assertIn("blue", player_info)
        self.assertIn("red", player_info)

        self.assertEqual(len(player_info["red"]), 1)
        self.assertEqual(len(player_info["blue"]), 7)

        expected_map = {(0, 0): 0, (1, -1): 2, (1, 0): 2, (1, 1): 2, (2, -2): 0, (2, -1): 2, (2, 0): 2, (2, 1): 2, (2, 2): 2, (3, -3): 1, (3, -2): 2, (3, -1): 2, (3, 0): 2, (3, 1): 2, (3, 2): 2, (3, 3): 2, (4, -4): 0, (4, -3): 1, (4, -2): 2, (4, -1): 2, (4, 0): 2, (4, 1): 2, (4, 2): 2, (4, 3): 2, (4, 4): 2, (5, -5): 0, (5, -4): 2, (5, -3): 2, (5, -2): 2, (5, -1): 2, (5, 0): 2, (5, 1): 2, (5, 2): 2, (5, 3): 2, (5, 4): 2, (5, 5): 2, (6, -6): 0, (6, -5): 0, (6, -4): 2, (6, -3): 2, (6, -2): 2, (6, -1): 2, (6, 0): 2, (6, 1): 2, (6, 2): 2, (6, 3): 2, (6, 4): 2, (6, 5): 2, (6, 6): 2, (7, -7): 0, (7, -6): 0, (7, -5): 0, (7, -4): 2, (7, -3): 2, (7, -2): 2, (7, -1): 2, (7, 0): 2, (7, 1): 2, (7, 2): 2, (7, 3): 2, (7, 4): 2, (7, 5): 2, (7, 6): 2, (7, 7): 2, (8, -8): 0, (8, -7): 0, (8, -6): 0, (8, -5): 0, (8, -4): 2, (8, -3): 2, (8, -2): 2, (8, -1): 2, (8, 0): 2, (8, 1): 2, (8, 2): 2, (8, 3): 2, (8, 4): 2, (8, 5): 2, (8, 6): 2, (8, 7): 2, (8, 8): 0, (9, -9): 0, (9, -8): 0, (9, -7): 0, (9, -6): 0, (9, -5): 0, (9, -4): 2, (9, -3): 2, (9, -2): 2, (9, -1): 2, (9, 0): 2, (9, 1): 2, (9, 2): 2, (9, 3): 2, (9, 4): 4, (9, 5): 2, (9, 6): 2, (9, 7): 0, (9, 8): 0, (9, 9): 0, (10, -10): 1, (10, -9): 1, (10, -8): 1, (10, -7): 1, (10, -6): 1, (10, -5): 1, (10, -4): 1, (10, -3): 2, (10, -2): 2, (10, -1): 2, (10, 0): 2, (10, 1): 2, (10, 2): 4, (10, 3): 2, (10, 4): 2, (10, 5): 2, (10, 6): 2, (10, 7): 0, (10, 8): 0, (10, 9): 0, (10, 10): 0, (11, -11): 0, (11, -10): 0, (11, -9): 0, (11, -8): 0, (11, -7): 0, (11, -6): 0, (11, -5): 0, (11, -4): 1, (11, -3): 2, (11, -2): 2, (11, -1): 2, (11, 0): 2, (11, 1): 2, (11, 2): 2, (11, 3): 2, (11, 4): 2, (11, 5): 2, (11, 6): 2, (11, 7): 0, (11, 8): 0, (11, 9): 0, (11, 10): 0, (11, 11): 0, (12, -12): 0, (12, -11): 0, (12, -10): 0, (12, -9): 0, (12, -8): 0, (12, -7): 0, (12, -6): 0, (12, -5): 0, (12, -4): 1, (12, -3): 2, (12, -2): 2, (12, -1): 2, (12, 0): 2, (12, 1): 2, (12, 2): 2, (12, 3): 4, (12, 4): 2, (12, 5): 2, (12, 6): 2, (12, 7): 0, (12, 8): 0, (12, 9): 0, (12, 10): 0, (12, 11): 0, (12, 12): 0, (13, -13): 0, (13, -12): 0, (13, -11): 1, (13, -10): 0, (13, -9): 0, (13, -8): 0, (13, -7): 0, (13, -6): 0, (13, -5): 0, (13, -4): 1, (13, -3): 1, (13, -2): 1, (13, -1): 1, (13, 0): 2, (13, 1): 2, (13, 2): 2, (13, 3): 2, (13, 4): 2, (13, 5): 2, (13, 6): 2, (13, 7): 0, (13, 8): 0, (13, 9): 0, (13, 10): 0, (13, 11): 0, (13, 12): 0, (13, 13): 0, (14, -14): 1, (14, -13): 1, (14, -12): 1, (14, -11): 1, (14, -10): 0, (14, -9): 0, (14, -8): 0, (14, -7): 0, (14, -6): 0, (14, -5): 0, (14, -4): 0, (14, -3): 0, (14, -2): 0, (14, -1): 1, (14, 0): 2, (14, 1): 2, (14, 2): 2, (14, 3): 3, (14, 4): 4, (14, 5): 2, (14, 6): 2, (14, 7): 2, (14, 8): 2, (14, 9): 0, (14, 10): 0, (14, 11): 0, (14, 12): 0, (14, 13): 0, (15, -15): 0, (15, -14): 0, (15, -13): 0, (15, -12): 0, (15, -11): 1, (15, -10): 0, (15, -9): 0, (15, -8): 0, (15, -7): 0, (15, -6): 0, (15, -5): 0, (15, -4): 0, (15, -3): 0, (15, -2): 0, (15, -1): 1, (15, 0): 2, (15, 1): 2, (15, 2): 2, (15, 3): 2, (15, 4): 2, (15, 5): 4, (15, 6): 2, (15, 7): 2, (15, 8): 0, (15, 9): 1, (15, 10): 0, (15, 11): 0, (15, 12): 0, (16, -16): 0, (16, -15): 0, (16, -14): 0, (16, -13): 0, (16, -12): 1, (16, -11): 1, (16, -10): 0, (16, -9): 0, (16, -8): 0, (16, -7): 0, (16, -6): 0, (16, -5): 0, (16, -4): 0, (16, -3): 0, (16, -2): 0, (16, -1): 1, (16, 0): 2, (16, 1): 2, (16, 2): 2, (16, 3): 4, (16, 4): 2, (16, 5): 2, (16, 6): 2, (16, 7): 2, (16, 8): 2, (16, 9): 0, (16, 10): 0, (16, 11): 0, (17, -17): 2, (17, -16): 2, (17, -15): 2, (17, -14): 2, (17, -13): 2, (17, -12): 0, (17, -11): 1, (17, -10): 1, (17, -9): 1, (17, -8): 1, (17, -7): 1, (17, -6): 1, (17, -5): 1, (17, -4): 1, (17, -3): 0, (17, -2): 0, (17, -1): 1, (17, 0): 2, (17, 1): 2, (17, 2): 2, (17, 3): 2, (17, 4): 2, (17, 5): 4, (17, 6): 2, (17, 7): 2, (17, 8): 0, (17, 9): 0, (17, 10): 0, (18, -18): 2, (18, -17): 2, (18, -16): 2, (18, -15): 2, (18, -14): 2, (18, -13): 2, (18, -12): 2, (18, -11): 0, (18, -10): 2, (18, -9): 2, (18, -8): 0, (18, -7): 2, (18, -6): 2, (18, -5): 0, (18, -4): 1, (18, -3): 0, (18, -2): 0, (18, -1): 1, (18, 0): 2, (18, 1): 0, (18, 2): 2, (18, 3): 2, (18, 4): 2, (18, 5): 2, (18, 6): 2, (18, 7): 0, (18, 8): 0, (18, 9): 0, (19, -19): 2, (19, -18): 2, (19, -17): 2, (19, -16): 2, (19, -15): 0, (19, -14): 2, (19, -13): 2, (19, -12): 2, (19, -11): 2, (19, -10): 2, (19, -9): 2, (19, -8): 2, (19, -7): 2, (19, -6): 2, (19, -5): 2, (19, -4): 1, (19, -3): 0, (19, -2): 0, (19, -1): 1, (19, 0): 2, (19, 1): 2, (19, 2): 2, (19, 3): 2, (19, 4): 2, (19, 5): 2, (19, 6): 2, (19, 7): 0, (19, 8): 0, (20, -19): 2, (20, -18): 2, (20, -17): 2, (20, -16): 2, (20, -15): 0, (20, -14): 2, (20, -13): 2, (20, -12): 2, (20, -11): 2, (20, -10): 2, (20, -9): 2, (20, -8): 2, (20, -7): 2, (20, -6): 2, (20, -5): 2, (20, -4): 1, (20, -3): 0, (20, -2): 0, (20, -1): 1, (20, 0): 0, (20, 1): 2, (20, 2): 2, (20, 3): 2, (20, 4): 2, (20, 5): 2, (20, 6): 2, (20, 7): 0, (21, -18): 2, (21, -17): 2, (21, -16): 2, (21, -15): 2, (21, -14): 2, (21, -13): 0, (21, -12): 0, (21, -11): 2, (21, -10): 2, (21, -9): 2, (21, -8): 2, (21, -7): 2, (21, -6): 2, (21, -5): 2, (21, -4): 1, (21, -3): 1, (21, -2): 1, (21, -1): 1, (21, 0): 2, (21, 1): 2, (21, 2): 2, (21, 3): 2, (21, 4): 2, (21, 5): 2, (21, 6): 0, (22, -17): 2, (22, -16): 2, (22, -15): 2, (22, -14): 2, (22, -13): 0, (22, -12): 0, (22, -11): 0, (22, -10): 2, (22, -9): 2, (22, -8): 2, (22, -7): 2, (22, -6): 2, (22, -5): 2, (22, -4): 2, (22, -3): 2, (22, -2): 2, (22, -1): 2, (22, 0): 2, (22, 1): 2, (22, 2): 2, (22, 3): 2, (22, 4): 2, (22, 5): 2, (23, -16): 2, (23, -15): 2, (23, -14): 2, (23, -13): 2, (23, -12): 0, (23, -11): 0, (23, -10): 2, (23, -9): 2, (23, -8): 2, (23, -7): 2, (23, -6): 2, (23, -5): 2, (23, -4): 2, (23, -3): 2, (23, -2): 2, (23, -1): 2, (23, 0): 2, (23, 1): 2, (23, 2): 2, (23, 3): 2, (23, 4): 2, (24, -15): 2, (24, -14): 2, (24, -13): 2, (24, -12): 2, (24, -11): 2, (24, -10): 2, (24, -9): 2, (24, -8): 0, (24, -7): 2, (24, -6): 2, (24, -5): 2, (24, -4): 2, (24, -3): 2, (24, -2): 2, (24, -1): 2, (24, 0): 2, (24, 1): 2, (24, 2): 2, (24, 3): 2, (25, -14): 2, (25, -13): 2, (25, -12): 2, (25, -11): 0, (25, -10): 2, (25, -9): 2, (25, -8): 2, (25, -7): 2, (25, -6): 2, (25, -5): 2, (25, -4): 2, (25, -3): 2, (25, -2): 2, (25, -1): 2, (25, 0): 2, (25, 1): 2, (25, 2): 2, (26, -13): 2, (26, -12): 2, (26, -11): 2, (26, -10): 2, (26, -9): 2, (26, -8): 2, (26, -7): 2, (26, -6): 2, (26, -5): 2, (26, -4): 2, (26, -3): 2, (26, -2): 2, (26, -1): 2, (26, 0): 0, (26, 1): 1, (27, -12): 2, (27, -11): 2, (27, -10): 2, (27, -9): 2, (27, -8): 2, (27, -7): 2, (27, -6): 2, (27, -5): 2, (27, -4): 2, (27, -3): 2, (27, -2): 2, (27, -1): 2, (27, 0): 0, (28, -11): 2, (28, -10): 2, (28, -9): 2, (28, -8): 2, (28, -7): 2, (28, -6): 2, (28, -5): 2, (28, -4): 2, (28, -3): 2, (28, -2): 2, (28, -1): 2, (29, -10): 2, (29, -9): 2, (29, -8): 2, (29, -7): 2, (29, -6): 2, (29, -5): 2, (29, -4): 2, (29, -3): 2, (29, -2): 2, (30, -9): 2, (30, -8): 2, (30, -7): 2, (30, -6): 2, (30, -5): 2, (30, -4): 2, (30, -3): 2, (31, -8): 2, (31, -7): 2, (31, -6): 2, (31, -5): 2, (31, -4): 2, (32, -7): 2, (32, -6): 2, (32, -5): 2, (33, -6): 0}
        self.assertDictEqual(map_obj.map_dict, expected_map)

    def test_fight3(self):
        from core.ScaleManager import ScaleManager
        full_image = cv2.imread("/home/nicolas/Documents/Programation/Python/bot2pix/TestData/img/fight3.png")
        h, w, c = full_image.shape
        ScaleManager().set_win_size(w, h)
        x, y, w, h = dofus.COMBAT_R.getRect()
        map_image = full_image[y:y + h, x:x + w, :]
        map_parser = CombatMapParser(w, h)
        map_obj, player_info = map_parser.parse_map(map_image, is_placement_stage=False)

        self.assertNotIn("red_start_pos", player_info)
        self.assertNotIn("blue_start_pos", player_info)
        self.assertIn("blue", player_info)
        self.assertIn("red", player_info)

        self.assertEqual(len(player_info["red"]), 1)
        self.assertEqual(len(player_info["blue"]), 1)

        expected_map = {(0, 0): 0, (1, -1): 2, (1, 0): 2, (1, 1): 2, (2, -2): 2, (2, -1): 2, (2, 0): 2, (2, 1): 2, (2, 2): 2, (3, -3): 2, (3, -2): 2, (3, -1): 2, (3, 0): 2, (3, 1): 2, (3, 2): 2, (3, 3): 2, (4, -4): 1, (4, -3): 2, (4, -2): 2, (4, -1): 2, (4, 0): 2, (4, 1): 2, (4, 2): 2, (4, 3): 2, (4, 4): 2, (5, -5): 0, (5, -4): 1, (5, -3): 2, (5, -2): 2, (5, -1): 2, (5, 0): 2, (5, 1): 2, (5, 2): 2, (5, 3): 4, (5, 4): 2, (5, 5): 2, (6, -6): 0, (6, -5): 0, (6, -4): 1, (6, -3): 2, (6, -2): 2, (6, -1): 2, (6, 0): 2, (6, 1): 2, (6, 2): 2, (6, 3): 2, (6, 4): 2, (6, 5): 2, (6, 6): 2, (7, -7): 1, (7, -6): 0, (7, -5): 0, (7, -4): 1, (7, -3): 1, (7, -2): 2, (7, -1): 2, (7, 0): 2, (7, 1): 2, (7, 2): 2, (7, 3): 2, (7, 4): 2, (7, 5): 2, (7, 6): 2, (7, 7): 2, (8, -8): 0, (8, -7): 1, (8, -6): 0, (8, -5): 0, (8, -4): 0, (8, -3): 1, (8, -2): 2, (8, -1): 2, (8, 0): 2, (8, 1): 2, (8, 2): 2, (8, 3): 2, (8, 4): 2, (8, 5): 2, (8, 6): 2, (8, 7): 2, (8, 8): 2, (9, -9): 0, (9, -8): 0, (9, -7): 1, (9, -6): 1, (9, -5): 1, (9, -4): 1, (9, -3): 1, (9, -2): 2, (9, -1): 2, (9, 0): 2, (9, 1): 2, (9, 2): 2, (9, 3): 2, (9, 4): 2, (9, 5): 2, (9, 6): 2, (9, 7): 2, (9, 8): 2, (9, 9): 2, (10, -10): 2, (10, -9): 2, (10, -8): 0, (10, -7): 0, (10, -6): 2, (10, -5): 2, (10, -4): 0, (10, -3): 2, (10, -2): 2, (10, -1): 2, (10, 0): 2, (10, 1): 2, (10, 2): 2, (10, 3): 2, (10, 4): 2, (10, 5): 2, (10, 6): 2, (10, 7): 2, (10, 8): 2, (10, 9): 2, (10, 10): 0, (11, -11): 2, (11, -10): 2, (11, -9): 2, (11, -8): 2, (11, -7): 2, (11, -6): 2, (11, -5): 2, (11, -4): 2, (11, -3): 2, (11, -2): 2, (11, -1): 2, (11, 0): 0, (11, 1): 2, (11, 2): 2, (11, 3): 2, (11, 4): 2, (11, 5): 2, (11, 6): 2, (11, 7): 2, (11, 8): 1, (11, 9): 1, (11, 10): 0, (11, 11): 0, (12, -12): 2, (12, -11): 2, (12, -10): 2, (12, -9): 2, (12, -8): 2, (12, -7): 2, (12, -6): 2, (12, -5): 2, (12, -4): 2, (12, -3): 2, (12, -2): 2, (12, -1): 2, (12, 0): 2, (12, 1): 2, (12, 2): 2, (12, 3): 2, (12, 4): 2, (12, 5): 2, (12, 6): 2, (12, 7): 2, (12, 8): 1, (12, 9): 0, (12, 10): 0, (12, 11): 0, (12, 12): 0, (13, -13): 2, (13, -12): 2, (13, -11): 2, (13, -10): 2, (13, -9): 2, (13, -8): 2, (13, -7): 2, (13, -6): 2, (13, -5): 2, (13, -4): 2, (13, -3): 2, (13, -2): 1, (13, -1): 1, (13, 0): 1, (13, 1): 1, (13, 2): 1, (13, 3): 1, (13, 4): 1, (13, 5): 2, (13, 6): 2, (13, 7): 2, (13, 8): 1, (13, 9): 0, (13, 10): 0, (13, 11): 0, (13, 12): 0, (13, 13): 0, (14, -14): 2, (14, -13): 2, (14, -12): 2, (14, -11): 2, (14, -10): 3, (14, -9): 2, (14, -8): 2, (14, -7): 2, (14, -6): 2, (14, -5): 2, (14, -4): 2, (14, -3): 2, (14, -2): 2, (14, -1): 1, (14, 0): 0, (14, 1): 0, (14, 2): 0, (14, 3): 0, (14, 4): 1, (14, 5): 1, (14, 6): 1, (14, 7): 1, (14, 8): 1, (14, 9): 0, (14, 10): 0, (14, 11): 0, (14, 12): 0, (14, 13): 0, (15, -15): 2, (15, -14): 2, (15, -13): 2, (15, -12): 2, (15, -11): 2, (15, -10): 2, (15, -9): 2, (15, -8): 2, (15, -7): 2, (15, -6): 2, (15, -5): 1, (15, -4): 1, (15, -3): 0, (15, -2): 2, (15, -1): 1, (15, 0): 0, (15, 1): 0, (15, 2): 0, (15, 3): 0, (15, 4): 0, (15, 5): 0, (15, 6): 0, (15, 7): 0, (15, 8): 0, (15, 9): 0, (15, 10): 0, (15, 11): 0, (15, 12): 0, (16, -16): 2, (16, -15): 2, (16, -14): 2, (16, -13): 2, (16, -12): 2, (16, -11): 2, (16, -10): 2, (16, -9): 2, (16, -8): 2, (16, -7): 2, (16, -6): 2, (16, -5): 0, (16, -4): 1, (16, -3): 2, (16, -2): 2, (16, -1): 1, (16, 0): 0, (16, 1): 0, (16, 2): 0, (16, 3): 0, (16, 4): 0, (16, 5): 0, (16, 6): 0, (16, 7): 0, (16, 8): 0, (16, 9): 0, (16, 10): 0, (16, 11): 0, (17, -17): 2, (17, -16): 2, (17, -15): 2, (17, -14): 2, (17, -13): 2, (17, -12): 2, (17, -11): 2, (17, -10): 2, (17, -9): 2, (17, -8): 2, (17, -7): 2, (17, -6): 2, (17, -5): 2, (17, -4): 2, (17, -3): 2, (17, -2): 2, (17, -1): 1, (17, 0): 0, (17, 1): 0, (17, 2): 0, (17, 3): 0, (17, 4): 0, (17, 5): 0, (17, 6): 0, (17, 7): 0, (17, 8): 0, (17, 9): 0, (17, 10): 0, (18, -18): 2, (18, -17): 2, (18, -16): 2, (18, -15): 2, (18, -14): 2, (18, -13): 2, (18, -12): 2, (18, -11): 2, (18, -10): 2, (18, -9): 2, (18, -8): 2, (18, -7): 2, (18, -6): 2, (18, -5): 2, (18, -4): 2, (18, -3): 2, (18, -2): 2, (18, -1): 1, (18, 0): 0, (18, 1): 0, (18, 2): 0, (18, 3): 0, (18, 4): 0, (18, 5): 0, (18, 6): 0, (18, 7): 0, (18, 8): 0, (18, 9): 0, (19, -19): 2, (19, -18): 2, (19, -17): 2, (19, -16): 2, (19, -15): 2, (19, -14): 2, (19, -13): 2, (19, -12): 2, (19, -11): 2, (19, -10): 2, (19, -9): 2, (19, -8): 2, (19, -7): 2, (19, -6): 2, (19, -5): 2, (19, -4): 2, (19, -3): 2, (19, -2): 2, (19, -1): 1, (19, 0): 0, (19, 1): 0, (19, 2): 0, (19, 3): 0, (19, 4): 0, (19, 5): 0, (19, 6): 0, (19, 7): 0, (19, 8): 0, (20, -19): 2, (20, -18): 2, (20, -17): 2, (20, -16): 2, (20, -15): 2, (20, -14): 2, (20, -13): 2, (20, -12): 2, (20, -11): 2, (20, -10): 2, (20, -9): 2, (20, -8): 2, (20, -7): 2, (20, -6): 2, (20, -5): 2, (20, -4): 2, (20, -3): 2, (20, -2): 0, (20, -1): 1, (20, 0): 0, (20, 1): 0, (20, 2): 0, (20, 3): 0, (20, 4): 0, (20, 5): 0, (20, 6): 0, (20, 7): 0, (21, -18): 2, (21, -17): 2, (21, -16): 2, (21, -15): 2, (21, -14): 2, (21, -13): 2, (21, -12): 2, (21, -11): 2, (21, -10): 2, (21, -9): 2, (21, -8): 2, (21, -7): 2, (21, -6): 2, (21, -5): 2, (21, -4): 2, (21, -3): 2, (21, -2): 0, (21, -1): 1, (21, 0): 0, (21, 1): 0, (21, 2): 0, (21, 3): 0, (21, 4): 0, (21, 5): 0, (21, 6): 0, (22, -17): 2, (22, -16): 2, (22, -15): 2, (22, -14): 2, (22, -13): 2, (22, -12): 2, (22, -11): 2, (22, -10): 2, (22, -9): 2, (22, -8): 2, (22, -7): 2, (22, -6): 2, (22, -5): 2, (22, -4): 2, (22, -3): 2, (22, -2): 1, (22, -1): 1, (22, 0): 0, (22, 1): 0, (22, 2): 0, (22, 3): 0, (22, 4): 0, (22, 5): 0, (23, -16): 2, (23, -15): 2, (23, -14): 2, (23, -13): 2, (23, -12): 2, (23, -11): 2, (23, -10): 2, (23, -9): 2, (23, -8): 2, (23, -7): 2, (23, -6): 2, (23, -5): 2, (23, -4): 2, (23, -3): 2, (23, -2): 1, (23, -1): 0, (23, 0): 0, (23, 1): 0, (23, 2): 0, (23, 3): 0, (23, 4): 0, (24, -15): 2, (24, -14): 2, (24, -13): 2, (24, -12): 2, (24, -11): 2, (24, -10): 2, (24, -9): 2, (24, -8): 2, (24, -7): 2, (24, -6): 2, (24, -5): 2, (24, -4): 2, (24, -3): 2, (24, -2): 1, (24, -1): 1, (24, 0): 1, (24, 1): 1, (24, 2): 0, (24, 3): 0, (25, -14): 2, (25, -13): 2, (25, -12): 2, (25, -11): 2, (25, -10): 2, (25, -9): 2, (25, -8): 2, (25, -7): 2, (25, -6): 2, (25, -5): 2, (25, -4): 2, (25, -3): 2, (25, -2): 2, (25, -1): 0, (25, 0): 0, (25, 1): 1, (25, 2): 0, (26, -13): 2, (26, -12): 2, (26, -11): 2, (26, -10): 2, (26, -9): 2, (26, -8): 2, (26, -7): 2, (26, -6): 2, (26, -5): 2, (26, -4): 2, (26, -3): 2, (26, -2): 2, (26, -1): 2, (26, 0): 2, (26, 1): 1, (27, -12): 2, (27, -11): 2, (27, -10): 2, (27, -9): 2, (27, -8): 2, (27, -7): 2, (27, -6): 2, (27, -5): 2, (27, -4): 2, (27, -3): 2, (27, -2): 2, (27, -1): 2, (27, 0): 2, (28, -11): 2, (28, -10): 2, (28, -9): 2, (28, -8): 2, (28, -7): 2, (28, -6): 2, (28, -5): 2, (28, -4): 2, (28, -3): 2, (28, -2): 2, (28, -1): 1, (29, -10): 2, (29, -9): 2, (29, -8): 2, (29, -7): 2, (29, -6): 2, (29, -5): 2, (29, -4): 2, (29, -3): 2, (29, -2): 2, (30, -9): 2, (30, -8): 2, (30, -7): 2, (30, -6): 2, (30, -5): 2, (30, -4): 2, (30, -3): 2, (31, -8): 2, (31, -7): 2, (31, -6): 2, (31, -5): 2, (31, -4): 2, (32, -7): 2, (32, -6): 2, (32, -5): 2, (33, -6): 0}
        self.assertDictEqual(map_obj.map_dict, expected_map)

    def test_fight2(self):
        from core.ScaleManager import ScaleManager
        full_image = cv2.imread("/home/nicolas/Documents/Programation/Python/bot2pix/TestData/img/fight2.png")
        h, w, c = full_image.shape
        ScaleManager().set_win_size(w, h)
        x, y, w, h = dofus.COMBAT_R.getRect()
        map_image = full_image[y:y + h, x:x + w, :]
        map_parser = CombatMapParser(w, h)
        map_obj, player_info = map_parser.parse_map(map_image, is_placement_stage=False)

        self.assertNotIn("red_start_pos", player_info)
        self.assertNotIn("blue_start_pos", player_info)
        self.assertIn("blue", player_info)
        self.assertIn("red", player_info)

        self.assertEqual(len(player_info["red"]), 1)
        self.assertEqual(len(player_info["blue"]), 5)

        expected_map = {(0, 0): 0, (1, -1): 0, (1, 0): 0, (1, 1): 0, (2, -2): 0, (2, -1): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, -3): 0, (3, -2): 0, (3, -1): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0, (3, 3): 0, (4, -4): 0, (4, -3): 0, (4, -2): 0, (4, -1): 0, (4, 0): 0, (4, 1): 0, (4, 2): 0, (4, 3): 0, (4, 4): 0, (5, -5): 0, (5, -4): 0, (5, -3): 0, (5, -2): 0, (5, -1): 0, (5, 0): 0, (5, 1): 0, (5, 2): 0, (5, 3): 0, (5, 4): 0, (5, 5): 0, (6, -6): 0, (6, -5): 0, (6, -4): 0, (6, -3): 0, (6, -2): 0, (6, -1): 0, (6, 0): 0, (6, 1): 0, (6, 2): 0, (6, 3): 0, (6, 4): 0, (6, 5): 0, (6, 6): 0, (7, -7): 0, (7, -6): 0, (7, -5): 0, (7, -4): 0, (7, -3): 0, (7, -2): 0, (7, -1): 0, (7, 0): 0, (7, 1): 0, (7, 2): 0, (7, 3): 0, (7, 4): 0, (7, 5): 0, (7, 6): 0, (7, 7): 0, (8, -8): 0, (8, -7): 0, (8, -6): 1, (8, -5): 1, (8, -4): 0, (8, -3): 0, (8, -2): 0, (8, -1): 0, (8, 0): 0, (8, 1): 0, (8, 2): 0, (8, 3): 0, (8, 4): 0, (8, 5): 0, (8, 6): 0, (8, 7): 0, (8, 8): 0, (9, -9): 0, (9, -8): 0, (9, -7): 0, (9, -6): 1, (9, -5): 2, (9, -4): 2, (9, -3): 2, (9, -2): 1, (9, -1): 1, (9, 0): 0, (9, 1): 0, (9, 2): 0, (9, 3): 0, (9, 4): 0, (9, 5): 0, (9, 6): 0, (9, 7): 0, (9, 8): 0, (9, 9): 0, (10, -10): 0, (10, -9): 0, (10, -8): 0, (10, -7): 0, (10, -6): 1, (10, -5): 2, (10, -4): 2, (10, -3): 2, (10, -2): 1, (10, -1): 0, (10, 0): 0, (10, 1): 0, (10, 2): 0, (10, 3): 0, (10, 4): 0, (10, 5): 0, (10, 6): 0, (10, 7): 0, (10, 8): 0, (10, 9): 0, (10, 10): 0, (11, -11): 0, (11, -10): 0, (11, -9): 0, (11, -8): 0, (11, -7): 0, (11, -6): 1, (11, -5): 2, (11, -4): 2, (11, -3): 2, (11, -2): 1, (11, -1): 1, (11, 0): 1, (11, 1): 1, (11, 2): 1, (11, 3): 0, (11, 4): 0, (11, 5): 0, (11, 6): 0, (11, 7): 0, (11, 8): 0, (11, 9): 0, (11, 10): 0, (11, 11): 0, (12, -12): 0, (12, -11): 0, (12, -10): 0, (12, -9): 0, (12, -8): 0, (12, -7): 1, (12, -6): 1, (12, -5): 0, (12, -4): 2, (12, -3): 2, (12, -2): 2, (12, -1): 2, (12, 0): 2, (12, 1): 2, (12, 2): 1, (12, 3): 1, (12, 4): 0, (12, 5): 0, (12, 6): 0, (12, 7): 0, (12, 8): 0, (12, 9): 0, (12, 10): 0, (12, 11): 0, (12, 12): 0, (13, -13): 0, (13, -12): 0, (13, -11): 1, (13, -10): 1, (13, -9): 1, (13, -8): 1, (13, -7): 1, (13, -6): 4, (13, -5): 2, (13, -4): 4, (13, -3): 2, (13, -2): 2, (13, -1): 2, (13, 0): 2, (13, 1): 2, (13, 2): 2, (13, 3): 1, (13, 4): 0, (13, 5): 0, (13, 6): 0, (13, 7): 0, (13, 8): 0, (13, 9): 0, (13, 10): 0, (13, 11): 0, (13, 12): 0, (13, 13): 0, (14, -14): 0, (14, -13): 0, (14, -12): 0, (14, -11): 1, (14, -10): 2, (14, -9): 2, (14, -8): 2, (14, -7): 2, (14, -6): 2, (14, -5): 2, (14, -4): 3, (14, -3): 2, (14, -2): 2, (14, -1): 2, (14, 0): 4, (14, 1): 2, (14, 2): 2, (14, 3): 1, (14, 4): 0, (14, 5): 0, (14, 6): 0, (14, 7): 0, (14, 8): 0, (14, 9): 0, (14, 10): 0, (14, 11): 0, (14, 12): 0, (14, 13): 0, (15, -15): 0, (15, -14): 0, (15, -13): 0, (15, -12): 0, (15, -11): 1, (15, -10): 2, (15, -9): 2, (15, -8): 2, (15, -7): 2, (15, -6): 2, (15, -5): 4, (15, -4): 2, (15, -3): 2, (15, -2): 2, (15, -1): 2, (15, 0): 2, (15, 1): 2, (15, 2): 2, (15, 3): 1, (15, 4): 0, (15, 5): 0, (15, 6): 0, (15, 7): 0, (15, 8): 0, (15, 9): 0, (15, 10): 0, (15, 11): 0, (15, 12): 0, (16, -16): 0, (16, -15): 0, (16, -14): 0, (16, -13): 0, (16, -12): 1, (16, -11): 1, (16, -10): 2, (16, -9): 2, (16, -8): 2, (16, -7): 2, (16, -6): 2, (16, -5): 2, (16, -4): 2, (16, -3): 2, (16, -2): 2, (16, -1): 2, (16, 0): 2, (16, 1): 1, (16, 2): 1, (16, 3): 1, (16, 4): 0, (16, 5): 0, (16, 6): 0, (16, 7): 0, (16, 8): 0, (16, 9): 0, (16, 10): 0, (16, 11): 0, (17, -17): 0, (17, -16): 0, (17, -15): 0, (17, -14): 0, (17, -13): 1, (17, -12): 1, (17, -11): 2, (17, -10): 2, (17, -9): 2, (17, -8): 2, (17, -7): 0, (17, -6): 2, (17, -5): 2, (17, -4): 2, (17, -3): 2, (17, -2): 2, (17, -1): 2, (17, 0): 1, (17, 1): 1, (17, 2): 0, (17, 3): 0, (17, 4): 0, (17, 5): 0, (17, 6): 0, (17, 7): 0, (17, 8): 0, (17, 9): 0, (17, 10): 0, (18, -18): 0, (18, -17): 0, (18, -16): 0, (18, -15): 0, (18, -14): 0, (18, -13): 1, (18, -12): 2, (18, -11): 2, (18, -10): 2, (18, -9): 2, (18, -8): 2, (18, -7): 1, (18, -6): 2, (18, -5): 0, (18, -4): 2, (18, -3): 2, (18, -2): 2, (18, -1): 2, (18, 0): 1, (18, 1): 0, (18, 2): 0, (18, 3): 0, (18, 4): 0, (18, 5): 0, (18, 6): 0, (18, 7): 0, (18, 8): 0, (18, 9): 0, (19, -19): 0, (19, -18): 0, (19, -17): 0, (19, -16): 0, (19, -15): 0, (19, -14): 0, (19, -13): 1, (19, -12): 2, (19, -11): 2, (19, -10): 2, (19, -9): 2, (19, -8): 2, (19, -7): 2, (19, -6): 2, (19, -5): 2, (19, -4): 2, (19, -3): 1, (19, -2): 1, (19, -1): 1, (19, 0): 1, (19, 1): 0, (19, 2): 0, (19, 3): 0, (19, 4): 0, (19, 5): 0, (19, 6): 0, (19, 7): 0, (19, 8): 0, (20, -19): 0, (20, -18): 0, (20, -17): 0, (20, -16): 0, (20, -15): 0, (20, -14): 0, (20, -13): 1, (20, -12): 2, (20, -11): 2, (20, -10): 2, (20, -9): 2, (20, -8): 0, (20, -7): 2, (20, -6): 2, (20, -5): 2, (20, -4): 2, (20, -3): 1, (20, -2): 0, (20, -1): 0, (20, 0): 1, (20, 1): 0, (20, 2): 0, (20, 3): 0, (20, 4): 0, (20, 5): 0, (20, 6): 0, (20, 7): 0, (21, -18): 0, (21, -17): 0, (21, -16): 0, (21, -15): 0, (21, -14): 0, (21, -13): 1, (21, -12): 2, (21, -11): 2, (21, -10): 2, (21, -9): 2, (21, -8): 2, (21, -7): 2, (21, -6): 2, (21, -5): 2, (21, -4): 2, (21, -3): 1, (21, -2): 0, (21, -1): 0, (21, 0): 1, (21, 1): 0, (21, 2): 0, (21, 3): 0, (21, 4): 0, (21, 5): 0, (21, 6): 0, (22, -17): 0, (22, -16): 0, (22, -15): 0, (22, -14): 0, (22, -13): 1, (22, -12): 2, (22, -11): 2, (22, -10): 2, (22, -9): 2, (22, -8): 2, (22, -7): 2, (22, -6): 2, (22, -5): 2, (22, -4): 2, (22, -3): 1, (22, -2): 0, (22, -1): 0, (22, 0): 1, (22, 1): 0, (22, 2): 0, (22, 3): 0, (22, 4): 0, (22, 5): 0, (23, -16): 0, (23, -15): 1, (23, -14): 1, (23, -13): 1, (23, -12): 2, (23, -11): 2, (23, -10): 2, (23, -9): 2, (23, -8): 2, (23, -7): 2, (23, -6): 2, (23, -5): 2, (23, -4): 2, (23, -3): 0, (23, -2): 0, (23, -1): 0, (23, 0): 1, (23, 1): 0, (23, 2): 0, (23, 3): 0, (23, 4): 0, (24, -15): 1, (24, -14): 2, (24, -13): 2, (24, -12): 2, (24, -11): 2, (24, -10): 2, (24, -9): 2, (24, -8): 2, (24, -7): 2, (24, -6): 2, (24, -5): 2, (24, -4): 2, (24, -3): 1, (24, -2): 1, (24, -1): 0, (24, 0): 1, (24, 1): 0, (24, 2): 0, (24, 3): 0, (25, -14): 2, (25, -13): 2, (25, -12): 2, (25, -11): 2, (25, -10): 2, (25, -9): 2, (25, -8): 2, (25, -7): 2, (25, -6): 2, (25, -5): 2, (25, -4): 2, (25, -3): 2, (25, -2): 1, (25, -1): 1, (25, 0): 1, (25, 1): 1, (25, 2): 1, (26, -13): 2, (26, -12): 2, (26, -11): 2, (26, -10): 2, (26, -9): 2, (26, -8): 2, (26, -7): 2, (26, -6): 2, (26, -5): 2, (26, -4): 2, (26, -3): 2, (26, -2): 2, (26, -1): 2, (26, 0): 2, (26, 1): 0, (27, -12): 2, (27, -11): 2, (27, -10): 2, (27, -9): 2, (27, -8): 2, (27, -7): 2, (27, -6): 2, (27, -5): 2, (27, -4): 2, (27, -3): 2, (27, -2): 2, (27, -1): 2, (27, 0): 2, (28, -11): 2, (28, -10): 2, (28, -9): 2, (28, -8): 2, (28, -7): 2, (28, -6): 2, (28, -5): 2, (28, -4): 2, (28, -3): 2, (28, -2): 2, (28, -1): 2, (29, -10): 2, (29, -9): 2, (29, -8): 2, (29, -7): 4, (29, -6): 2, (29, -5): 2, (29, -4): 2, (29, -3): 2, (29, -2): 2, (30, -9): 2, (30, -8): 2, (30, -7): 2, (30, -6): 2, (30, -5): 2, (30, -4): 2, (30, -3): 2, (31, -8): 2, (31, -7): 2, (31, -6): 2, (31, -5): 2, (31, -4): 2, (32, -7): 0, (32, -6): 2, (32, -5): 2, (33, -6): 0}
        self.assertDictEqual(map_obj.map_dict, expected_map)

    def test_fight1(self):
        from core.ScaleManager import ScaleManager
        full_image = cv2.imread("/home/nicolas/Documents/Programation/Python/bot2pix/TestData/img/fight1.png")
        h, w, c = full_image.shape
        ScaleManager().set_win_size(w, h)
        x, y, w, h = dofus.COMBAT_R.getRect()
        map_image = full_image[y:y + h, x:x + w, :]
        map_parser = CombatMapParser(w, h)
        map_obj, player_info = map_parser.parse_map(map_image, is_placement_stage=False)

        self.assertNotIn("red_start_pos", player_info)
        self.assertNotIn("blue_start_pos", player_info)
        self.assertIn("blue", player_info)
        self.assertIn("red", player_info)

        self.assertEqual(len(player_info["red"]), 1)
        self.assertEqual(len(player_info["blue"]), 3)

        expected_map = {(0, 0): 0, (1, -1): 2, (1, 0): 2, (1, 1): 2, (2, -2): 2, (2, -1): 2, (2, 0): 2, (2, 1): 2, (2, 2): 2, (3, -3): 0, (3, -2): 2, (3, -1): 2, (3, 0): 2, (3, 1): 2, (3, 2): 2, (3, 3): 2, (4, -4): 0, (4, -3): 0, (4, -2): 2, (4, -1): 2, (4, 0): 2, (4, 1): 2, (4, 2): 2, (4, 3): 2, (4, 4): 2, (5, -5): 0, (5, -4): 2, (5, -3): 2, (5, -2): 2, (5, -1): 2, (5, 0): 0, (5, 1): 2, (5, 2): 2, (5, 3): 2, (5, 4): 2, (5, 5): 2, (6, -6): 1, (6, -5): 0, (6, -4): 2, (6, -3): 2, (6, -2): 2, (6, -1): 2, (6, 0): 2, (6, 1): 2, (6, 2): 2, (6, 3): 2, (6, 4): 2, (6, 5): 2, (6, 6): 2, (7, -7): 0, (7, -6): 1, (7, -5): 0, (7, -4): 1, (7, -3): 2, (7, -2): 2, (7, -1): 2, (7, 0): 2, (7, 1): 2, (7, 2): 2, (7, 3): 2, (7, 4): 2, (7, 5): 2, (7, 6): 2, (7, 7): 2, (8, -8): 0, (8, -7): 1, (8, -6): 1, (8, -5): 2, (8, -4): 2, (8, -3): 2, (8, -2): 2, (8, -1): 2, (8, 0): 2, (8, 1): 2, (8, 2): 2, (8, 3): 2, (8, 4): 2, (8, 5): 2, (8, 6): 2, (8, 7): 2, (8, 8): 2, (9, -9): 0, (9, -8): 0, (9, -7): 1, (9, -6): 2, (9, -5): 2, (9, -4): 2, (9, -3): 2, (9, -2): 2, (9, -1): 2, (9, 0): 2, (9, 1): 2, (9, 2): 2, (9, 3): 2, (9, 4): 2, (9, 5): 2, (9, 6): 2, (9, 7): 2, (9, 8): 2, (9, 9): 2, (10, -10): 0, (10, -9): 0, (10, -8): 0, (10, -7): 1, (10, -6): 2, (10, -5): 2, (10, -4): 2, (10, -3): 2, (10, -2): 2, (10, -1): 2, (10, 0): 2, (10, 1): 2, (10, 2): 2, (10, 3): 2, (10, 4): 2, (10, 5): 2, (10, 6): 4, (10, 7): 2, (10, 8): 2, (10, 9): 2, (10, 10): 2, (11, -11): 0, (11, -10): 0, (11, -9): 0, (11, -8): 0, (11, -7): 1, (11, -6): 2, (11, -5): 2, (11, -4): 2, (11, -3): 2, (11, -2): 2, (11, -1): 2, (11, 0): 2, (11, 1): 2, (11, 2): 2, (11, 3): 2, (11, 4): 2, (11, 5): 2, (11, 6): 2, (11, 7): 2, (11, 8): 2, (11, 9): 2, (11, 10): 2, (11, 11): 2, (12, -12): 0, (12, -11): 0, (12, -10): 0, (12, -9): 0, (12, -8): 0, (12, -7): 1, (12, -6): 2, (12, -5): 2, (12, -4): 2, (12, -3): 2, (12, -2): 2, (12, -1): 2, (12, 0): 2, (12, 1): 4, (12, 2): 2, (12, 3): 2, (12, 4): 2, (12, 5): 2, (12, 6): 2, (12, 7): 2, (12, 8): 2, (12, 9): 2, (12, 10): 2, (12, 11): 2, (12, 12): 2, (13, -13): 0, (13, -12): 0, (13, -11): 0, (13, -10): 0, (13, -9): 0, (13, -8): 0, (13, -7): 1, (13, -6): 2, (13, -5): 2, (13, -4): 2, (13, -3): 2, (13, -2): 2, (13, -1): 2, (13, 0): 2, (13, 1): 2, (13, 2): 2, (13, 3): 2, (13, 4): 2, (13, 5): 2, (13, 6): 3, (13, 7): 2, (13, 8): 2, (13, 9): 2, (13, 10): 2, (13, 11): 2, (13, 12): 2, (13, 13): 0, (14, -14): 0, (14, -13): 0, (14, -12): 0, (14, -11): 0, (14, -10): 0, (14, -9): 0, (14, -8): 0, (14, -7): 1, (14, -6): 2, (14, -5): 2, (14, -4): 2, (14, -3): 2, (14, -2): 2, (14, -1): 2, (14, 0): 2, (14, 1): 2, (14, 2): 2, (14, 3): 2, (14, 4): 2, (14, 5): 2, (14, 6): 2, (14, 7): 2, (14, 8): 2, (14, 9): 4, (14, 10): 2, (14, 11): 1, (14, 12): 1, (14, 13): 1, (15, -15): 0, (15, -14): 0, (15, -13): 0, (15, -12): 0, (15, -11): 0, (15, -10): 0, (15, -9): 0, (15, -8): 0, (15, -7): 1, (15, -6): 1, (15, -5): 1, (15, -4): 1, (15, -3): 1, (15, -2): 1, (15, -1): 2, (15, 0): 2, (15, 1): 2, (15, 2): 2, (15, 3): 2, (15, 4): 2, (15, 5): 2, (15, 6): 2, (15, 7): 2, (15, 8): 2, (15, 9): 2, (15, 10): 2, (15, 11): 0, (15, 12): 1, (16, -16): 1, (16, -15): 1, (16, -14): 0, (16, -13): 0, (16, -12): 0, (16, -11): 0, (16, -10): 0, (16, -9): 0, (16, -8): 0, (16, -7): 0, (16, -6): 0, (16, -5): 0, (16, -4): 0, (16, -3): 0, (16, -2): 1, (16, -1): 2, (16, 0): 2, (16, 1): 2, (16, 2): 2, (16, 3): 2, (16, 4): 2, (16, 5): 2, (16, 6): 2, (16, 7): 2, (16, 8): 2, (16, 9): 2, (16, 10): 2, (16, 11): 0, (17, -17): 0, (17, -16): 0, (17, -15): 1, (17, -14): 1, (17, -13): 0, (17, -12): 0, (17, -11): 0, (17, -10): 0, (17, -9): 1, (17, -8): 1, (17, -7): 1, (17, -6): 0, (17, -5): 0, (17, -4): 0, (17, -3): 0, (17, -2): 1, (17, -1): 2, (17, 0): 2, (17, 1): 2, (17, 2): 2, (17, 3): 2, (17, 4): 2, (17, 5): 2, (17, 6): 1, (17, 7): 2, (17, 8): 2, (17, 9): 2, (17, 10): 2, (18, -18): 2, (18, -17): 2, (18, -16): 2, (18, -15): 0, (18, -14): 1, (18, -13): 1, (18, -12): 1, (18, -11): 1, (18, -10): 1, (18, -9): 1, (18, -8): 0, (18, -7): 1, (18, -6): 0, (18, -5): 0, (18, -4): 0, (18, -3): 0, (18, -2): 1, (18, -1): 2, (18, 0): 2, (18, 1): 2, (18, 2): 2, (18, 3): 2, (18, 4): 2, (18, 5): 2, (18, 6): 0, (18, 7): 0, (18, 8): 2, (18, 9): 2, (19, -19): 2, (19, -18): 2, (19, -17): 2, (19, -16): 2, (19, -15): 2, (19, -14): 0, (19, -13): 0, (19, -12): 1, (19, -11): 0, (19, -10): 2, (19, -9): 2, (19, -8): 0, (19, -7): 1, (19, -6): 0, (19, -5): 0, (19, -4): 0, (19, -3): 0, (19, -2): 1, (19, -1): 2, (19, 0): 2, (19, 1): 2, (19, 2): 2, (19, 3): 2, (19, 4): 2, (19, 5): 2, (19, 6): 2, (19, 7): 2, (19, 8): 2, (20, -19): 2, (20, -18): 2, (20, -17): 2, (20, -16): 2, (20, -15): 2, (20, -14): 2, (20, -13): 2, (20, -12): 2, (20, -11): 2, (20, -10): 2, (20, -9): 2, (20, -8): 1, (20, -7): 1, (20, -6): 1, (20, -5): 1, (20, -4): 1, (20, -3): 1, (20, -2): 1, (20, -1): 2, (20, 0): 2, (20, 1): 2, (20, 2): 2, (20, 3): 2, (20, 4): 2, (20, 5): 2, (20, 6): 2, (20, 7): 2, (21, -18): 2, (21, -17): 2, (21, -16): 2, (21, -15): 2, (21, -14): 2, (21, -13): 2, (21, -12): 2, (21, -11): 2, (21, -10): 2, (21, -9): 2, (21, -8): 0, (21, -7): 0, (21, -6): 2, (21, -5): 2, (21, -4): 2, (21, -3): 0, (21, -2): 0, (21, -1): 1, (21, 0): 2, (21, 1): 2, (21, 2): 2, (21, 3): 2, (21, 4): 2, (21, 5): 2, (21, 6): 2, (22, -17): 2, (22, -16): 2, (22, -15): 2, (22, -14): 2, (22, -13): 2, (22, -12): 2, (22, -11): 2, (22, -10): 2, (22, -9): 2, (22, -8): 2, (22, -7): 0, (22, -6): 2, (22, -5): 2, (22, -4): 2, (22, -3): 2, (22, -2): 2, (22, -1): 2, (22, 0): 2, (22, 1): 2, (22, 2): 2, (22, 3): 2, (22, 4): 2, (22, 5): 2, (23, -16): 2, (23, -15): 2, (23, -14): 2, (23, -13): 2, (23, -12): 2, (23, -11): 2, (23, -10): 2, (23, -9): 2, (23, -8): 2, (23, -7): 0, (23, -6): 2, (23, -5): 2, (23, -4): 2, (23, -3): 2, (23, -2): 2, (23, -1): 2, (23, 0): 2, (23, 1): 0, (23, 2): 2, (23, 3): 2, (23, 4): 2, (24, -15): 2, (24, -14): 2, (24, -13): 2, (24, -12): 2, (24, -11): 2, (24, -10): 2, (24, -9): 2, (24, -8): 2, (24, -7): 0, (24, -6): 0, (24, -5): 2, (24, -4): 2, (24, -3): 2, (24, -2): 2, (24, -1): 2, (24, 0): 2, (24, 1): 2, (24, 2): 2, (24, 3): 2, (25, -14): 2, (25, -13): 2, (25, -12): 2, (25, -11): 2, (25, -10): 2, (25, -9): 2, (25, -8): 2, (25, -7): 2, (25, -6): 2, (25, -5): 2, (25, -4): 2, (25, -3): 2, (25, -2): 2, (25, -1): 2, (25, 0): 2, (25, 1): 2, (25, 2): 2, (26, -13): 2, (26, -12): 2, (26, -11): 2, (26, -10): 2, (26, -9): 2, (26, -8): 2, (26, -7): 2, (26, -6): 2, (26, -5): 2, (26, -4): 2, (26, -3): 2, (26, -2): 2, (26, -1): 2, (26, 0): 2, (26, 1): 2, (27, -12): 2, (27, -11): 2, (27, -10): 2, (27, -9): 2, (27, -8): 2, (27, -7): 2, (27, -6): 2, (27, -5): 2, (27, -4): 2, (27, -3): 2, (27, -2): 2, (27, -1): 2, (27, 0): 2, (28, -11): 2, (28, -10): 2, (28, -9): 2, (28, -8): 2, (28, -7): 2, (28, -6): 2, (28, -5): 2, (28, -4): 2, (28, -3): 2, (28, -2): 2, (28, -1): 2, (29, -10): 2, (29, -9): 2, (29, -8): 2, (29, -7): 2, (29, -6): 2, (29, -5): 2, (29, -4): 2, (29, -3): 2, (29, -2): 2, (30, -9): 2, (30, -8): 2, (30, -7): 2, (30, -6): 2, (30, -5): 2, (30, -4): 2, (30, -3): 2, (31, -8): 2, (31, -7): 2, (31, -6): 2, (31, -5): 2, (31, -4): 2, (32, -7): 2, (32, -6): 2, (32, -5): 2, (33, -6): 0}
        self.assertDictEqual(map_obj.map_dict, expected_map)

    def test_startPosSelection(self):
        from core.ScaleManager import ScaleManager
        full_image = cv2.imread("/home/nicolas/Documents/Programation/Python/bot2pix/TestData/img/startPosSelection.png")
        h, w, c = full_image.shape
        ScaleManager().set_win_size(w, h)
        x, y, w, h = dofus.COMBAT_R.getRect()
        map_image = full_image[y:y + h, x:x + w, :]
        map_parser = CombatMapParser(w, h)
        map_obj, player_info = map_parser.parse_map(map_image, is_placement_stage=True)

        print(map_obj.map_dict)
        print(player_info)

        self.assertIn("red_start_pos", player_info)
        self.assertIn("blue_start_pos", player_info)
        self.assertIn("blue", player_info)
        self.assertIn("red", player_info)

        self.assertEqual(len(player_info["red"]), 1)
        self.assertEqual(len(player_info["blue"]), 3)

        self.assertEqual(len(player_info["red_start_pos"]), 12)
        self.assertEqual(len(player_info["blue_start_pos"]), 12)

        red_start = {(12, -6), (12, -5), (12, -4), (12, -3), (12, -2), (12, 4), (13, -1), (13, 0), (13, 1), (13, 2), (13, 3), (13, 4)}
        blue_start = {(12, -7), (12, -1), (12, 0), (12, 1), (12, 2), (12, 3), (13, -7), (13, -6), (13, -5), (13, -4), (13, -3), (13, -2)}

        self.assertSetEqual(red_start, set(player_info["red_start_pos"]))
        self.assertSetEqual(blue_start, set(player_info["blue_start_pos"]))

        expected_map = {(0, 0): 0, (1, -1): 2, (1, 0): 2, (1, 1): 2, (2, -2): 2, (2, -1): 2, (2, 0): 2, (2, 1): 2, (2, 2): 0, (3, -3): 2, (3, -2): 2, (3, -1): 2, (3, 0): 2, (3, 1): 2, (3, 2): 0, (3, 3): 0, (4, -4): 2, (4, -3): 2, (4, -2): 2, (4, -1): 2, (4, 0): 2, (4, 1): 0, (4, 2): 0, (4, 3): 0, (4, 4): 0, (5, -5): 2, (5, -4): 2, (5, -3): 2, (5, -2): 2, (5, -1): 2, (5, 0): 2, (5, 1): 2, (5, 2): 2, (5, 3): 0, (5, 4): 0, (5, 5): 0, (6, -6): 2, (6, -5): 2, (6, -4): 2, (6, -3): 2, (6, -2): 2, (6, -1): 2, (6, 0): 2, (6, 1): 2, (6, 2): 2, (6, 3): 2, (6, 4): 2, (6, 5): 0, (6, 6): 0, (7, -7): 2, (7, -6): 2, (7, -5): 2, (7, -4): 2, (7, -3): 2, (7, -2): 2, (7, -1): 2, (7, 0): 2, (7, 1): 2, (7, 2): 2, (7, 3): 2, (7, 4): 2, (7, 5): 0, (7, 6): 2, (7, 7): 2, (8, -8): 2, (8, -7): 2, (8, -6): 2, (8, -5): 2, (8, -4): 2, (8, -3): 2, (8, -2): 2, (8, -1): 2, (8, 0): 2, (8, 1): 2, (8, 2): 2, (8, 3): 2, (8, 4): 2, (8, 5): 2, (8, 6): 2, (8, 7): 2, (8, 8): 2, (9, -9): 2, (9, -8): 2, (9, -7): 2, (9, -6): 2, (9, -5): 2, (9, -4): 2, (9, -3): 2, (9, -2): 2, (9, -1): 2, (9, 0): 0, (9, 1): 0, (9, 2): 0, (9, 3): 0, (9, 4): 0, (9, 5): 2, (9, 6): 2, (9, 7): 2, (9, 8): 2, (9, 9): 2, (10, -10): 0, (10, -9): 2, (10, -8): 2, (10, -7): 2, (10, -6): 2, (10, -5): 2, (10, -4): 2, (10, -3): 2, (10, -2): 2, (10, -1): 2, (10, 0): 2, (10, 1): 2, (10, 2): 2, (10, 3): 0, (10, 4): 0, (10, 5): 0, (10, 6): 2, (10, 7): 2, (10, 8): 2, (10, 9): 2, (10, 10): 2, (11, -11): 1, (11, -10): 1, (11, -9): 2, (11, -8): 2, (11, -7): 2, (11, -6): 2, (11, -5): 2, (11, -4): 2, (11, -3): 2, (11, -2): 2, (11, -1): 2, (11, 0): 2, (11, 1): 2, (11, 2): 2, (11, 3): 2, (11, 4): 2, (11, 5): 2, (11, 6): 2, (11, 7): 2, (11, 8): 2, (11, 9): 2, (11, 10): 2, (11, 11): 0, (12, -12): 0, (12, -11): 0, (12, -10): 1, (12, -9): 2, (12, -8): 2, (12, -7): 2, (12, -6): 2, (12, -5): 2, (12, -4): 2, (12, -3): 2, (12, -2): 2, (12, -1): 2, (12, 0): 4, (12, 1): 2, (12, 2): 2, (12, 3): 4, (12, 4): 3, (12, 5): 2, (12, 6): 2, (12, 7): 2, (12, 8): 2, (12, 9): 2, (12, 10): 2, (12, 11): 2, (12, 12): 1, (13, -13): 0, (13, -12): 0, (13, -11): 0, (13, -10): 1, (13, -9): 2, (13, -8): 2, (13, -7): 2, (13, -6): 2, (13, -5): 2, (13, -4): 2, (13, -3): 2, (13, -2): 4, (13, -1): 2, (13, 0): 2, (13, 1): 2, (13, 2): 2, (13, 3): 2, (13, 4): 2, (13, 5): 2, (13, 6): 2, (13, 7): 2, (13, 8): 2, (13, 9): 2, (13, 10): 2, (13, 11): 2, (13, 12): 0, (13, 13): 0, (14, -14): 1, (14, -13): 0, (14, -12): 0, (14, -11): 0, (14, -10): 1, (14, -9): 2, (14, -8): 2, (14, -7): 2, (14, -6): 2, (14, -5): 2, (14, -4): 2, (14, -3): 2, (14, -2): 2, (14, -1): 2, (14, 0): 2, (14, 1): 2, (14, 2): 2, (14, 3): 2, (14, 4): 2, (14, 5): 2, (14, 6): 2, (14, 7): 2, (14, 8): 2, (14, 9): 2, (14, 10): 2, (14, 11): 0, (14, 12): 0, (14, 13): 0, (15, -15): 0, (15, -14): 1, (15, -13): 1, (15, -12): 1, (15, -11): 1, (15, -10): 1, (15, -9): 2, (15, -8): 2, (15, -7): 1, (15, -6): 1, (15, -5): 1, (15, -4): 1, (15, -3): 1, (15, -2): 2, (15, -1): 2, (15, 0): 2, (15, 1): 2, (15, 2): 2, (15, 3): 2, (15, 4): 2, (15, 5): 2, (15, 6): 2, (15, 7): 2, (15, 8): 2, (15, 9): 2, (15, 10): 2, (15, 11): 2, (15, 12): 0, (16, -16): 2, (16, -15): 2, (16, -14): 2, (16, -13): 2, (16, -12): 1, (16, -11): 2, (16, -10): 2, (16, -9): 2, (16, -8): 1, (16, -7): 1, (16, -6): 0, (16, -5): 0, (16, -4): 0, (16, -3): 1, (16, -2): 1, (16, -1): 2, (16, 0): 2, (16, 1): 2, (16, 2): 2, (16, 3): 2, (16, 4): 2, (16, 5): 2, (16, 6): 2, (16, 7): 2, (16, 8): 2, (16, 9): 2, (16, 10): 2, (16, 11): 2, (17, -17): 2, (17, -16): 2, (17, -15): 2, (17, -14): 2, (17, -13): 2, (17, -12): 2, (17, -11): 2, (17, -10): 2, (17, -9): 1, (17, -8): 1, (17, -7): 0, (17, -6): 0, (17, -5): 0, (17, -4): 0, (17, -3): 0, (17, -2): 1, (17, -1): 2, (17, 0): 2, (17, 1): 2, (17, 2): 2, (17, 3): 0, (17, 4): 0, (17, 5): 2, (17, 6): 2, (17, 7): 2, (17, 8): 2, (17, 9): 2, (17, 10): 0, (18, -18): 1, (18, -17): 2, (18, -16): 2, (18, -15): 2, (18, -14): 2, (18, -13): 2, (18, -12): 2, (18, -11): 2, (18, -10): 2, (18, -9): 1, (18, -8): 0, (18, -7): 0, (18, -6): 0, (18, -5): 0, (18, -4): 0, (18, -3): 0, (18, -2): 1, (18, -1): 2, (18, 0): 2, (18, 1): 2, (18, 2): 2, (18, 3): 0, (18, 4): 0, (18, 5): 0, (18, 6): 2, (18, 7): 2, (18, 8): 2, (18, 9): 2, (19, -19): 0, (19, -18): 1, (19, -17): 2, (19, -16): 2, (19, -15): 2, (19, -14): 2, (19, -13): 2, (19, -12): 2, (19, -11): 2, (19, -10): 0, (19, -9): 1, (19, -8): 0, (19, -7): 0, (19, -6): 0, (19, -5): 0, (19, -4): 0, (19, -3): 0, (19, -2): 1, (19, -1): 2, (19, 0): 2, (19, 1): 2, (19, 2): 2, (19, 3): 0, (19, 4): 0, (19, 5): 0, (19, 6): 2, (19, 7): 2, (19, 8): 2, (20, -19): 0, (20, -18): 1, (20, -17): 2, (20, -16): 2, (20, -15): 2, (20, -14): 2, (20, -13): 2, (20, -12): 2, (20, -11): 2, (20, -10): 0, (20, -9): 1, (20, -8): 0, (20, -7): 0, (20, -6): 0, (20, -5): 0, (20, -4): 0, (20, -3): 0, (20, -2): 1, (20, -1): 2, (20, 0): 2, (20, 1): 2, (20, 2): 2, (20, 3): 0, (20, 4): 0, (20, 5): 0, (20, 6): 2, (20, 7): 2, (21, -18): 0, (21, -17): 2, (21, -16): 2, (21, -15): 2, (21, -14): 2, (21, -13): 2, (21, -12): 2, (21, -11): 0, (21, -10): 1, (21, -9): 1, (21, -8): 0, (21, -7): 0, (21, -6): 0, (21, -5): 0, (21, -4): 0, (21, -3): 1, (21, -2): 1, (21, -1): 2, (21, 0): 2, (21, 1): 2, (21, 2): 2, (21, 3): 0, (21, 4): 0, (21, 5): 0, (21, 6): 0, (22, -17): 2, (22, -16): 2, (22, -15): 2, (22, -14): 2, (22, -13): 2, (22, -12): 2, (22, -11): 2, (22, -10): 1, (22, -9): 1, (22, -8): 0, (22, -7): 0, (22, -6): 0, (22, -5): 0, (22, -4): 1, (22, -3): 1, (22, -2): 2, (22, -1): 2, (22, 0): 2, (22, 1): 2, (22, 2): 0, (22, 3): 0, (22, 4): 0, (22, 5): 0, (23, -16): 2, (23, -15): 2, (23, -14): 2, (23, -13): 2, (23, -12): 2, (23, -11): 2, (23, -10): 0, (23, -9): 1, (23, -8): 0, (23, -7): 0, (23, -6): 0, (23, -5): 0, (23, -4): 1, (23, -3): 2, (23, -2): 2, (23, -1): 2, (23, 0): 2, (23, 1): 2, (23, 2): 2, (23, 3): 2, (23, 4): 0, (24, -15): 2, (24, -14): 2, (24, -13): 2, (24, -12): 2, (24, -11): 1, (24, -10): 1, (24, -9): 1, (24, -8): 0, (24, -7): 0, (24, -6): 0, (24, -5): 0, (24, -4): 1, (24, -3): 2, (24, -2): 2, (24, -1): 2, (24, 0): 2, (24, 1): 2, (24, 2): 2, (24, 3): 2, (25, -14): 2, (25, -13): 2, (25, -12): 2, (25, -11): 2, (25, -10): 2, (25, -9): 1, (25, -8): 1, (25, -7): 0, (25, -6): 0, (25, -5): 0, (25, -4): 1, (25, -3): 2, (25, -2): 2, (25, -1): 2, (25, 0): 2, (25, 1): 2, (25, 2): 2, (26, -13): 2, (26, -12): 2, (26, -11): 2, (26, -10): 2, (26, -9): 0, (26, -8): 1, (26, -7): 1, (26, -6): 1, (26, -5): 1, (26, -4): 1, (26, -3): 2, (26, -2): 2, (26, -1): 2, (26, 0): 2, (26, 1): 2, (27, -12): 2, (27, -11): 2, (27, -10): 2, (27, -9): 2, (27, -8): 1, (27, -7): 1, (27, -6): 2, (27, -5): 2, (27, -4): 2, (27, -3): 2, (27, -2): 2, (27, -1): 2, (27, 0): 2, (28, -11): 2, (28, -10): 2, (28, -9): 2, (28, -8): 2, (28, -7): 2, (28, -6): 2, (28, -5): 2, (28, -4): 2, (28, -3): 2, (28, -2): 2, (28, -1): 2, (29, -10): 2, (29, -9): 2, (29, -8): 2, (29, -7): 2, (29, -6): 2, (29, -5): 2, (29, -4): 2, (29, -3): 2, (29, -2): 2, (30, -9): 2, (30, -8): 2, (30, -7): 2, (30, -6): 2, (30, -5): 2, (30, -4): 2, (30, -3): 2, (31, -8): 1, (31, -7): 1, (31, -6): 1, (31, -5): 2, (31, -4): 2, (32, -7): 0, (32, -6): 1, (32, -5): 0, (33, -6): 0}
        self.assertDictEqual(map_obj.map_dict, expected_map)


if __name__ == '__main__':
    main()



